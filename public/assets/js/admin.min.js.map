{"version":3,"sources":["admin.js"],"names":[],"mappingsfile":"admin.min.js","sourcesContent":["\n/**\n * First we will load all of this project's JavaScript dependencies which\n * include Vue and Vue Resource. This gives a great starting point for\n * building robust, powerful web applications using Vue and Laravel.\n */\n\n//require('./bootstrap');\n\n/**\n * Next, we will create a fresh Vue application instance and attach it to\n * the body of the page. From here, you may begin adding components to\n * the application, or feel free to tweak this setup for your needs.\n */\n\n//Vue.component('example', require('./components/Example.vue'));\n\n/*\nconst app = new Vue({\n    el: '#app'\n});\n*/\n\nwindow.jQuery = window.$ = jQuery;\n\n\n/*-----------------------------------------------------------------------------------*/\n/*\tPRELOADER\n /*-----------------------------------------------------------------------------------*/\njQuery(window).load(function () {\n    //Preloader\n    setTimeout(\"jQuery('#preloader').animate({'opacity' : '0'},300,function(){jQuery('#preloader').hide()})\",800);\n    setTimeout(\"jQuery('.preloader_hide, .selector_open').animate({'opacity' : '1'},500)\",800);\n\n});\n\n\n$(function () {\n\n\n\n    //tool-tip\n    $(\".top-popover\").popover({\n        placement: 'top',\n        trigger: 'hover'\n    });\n    $(\".bottom-popover\").popover({\n        placement: 'bottom',\n        trigger: 'hover'\n    });\n    $(\".right-popover\").popover({\n        placement: 'right',\n        trigger: 'hover'\n    });\n    $(\".left-popover\").popover({\n        placement: 'left',\n        trigger: 'hover'\n    });\n\n\n\n    /*Attribute drag & Drop*/\n\n    //exclude older browsers by the features we need them to support\n    //and legacy opera explicitly so we don't waste time on a dead browser\n    if\n    (\n        !document.querySelectorAll\n        ||\n        !('draggable' in document.createElement('span'))\n        ||\n        window.opera\n    )\n    { return; }\n\n    //get the collection of draggable items and add their draggable attribute\n    for(var\n            items = document.querySelectorAll('[data-draggable=\"item\"]'),\n            len = items.length,\n            i = 0; i < len; i ++)\n    {\n        items[i].setAttribute('draggable', 'true');\n    }\n\n    //variable for storing the dragging item reference\n    //this will avoid the need to define any transfer data\n    //which means that the elements don't need to have IDs\n    var item = null;\n\n    //dragstart event to initiate mouse dragging\n    document.addEventListener('dragstart', function(e)\n    {\n        //set the item reference to this element\n        item = e.target;\n\n        //we don't need the transfer data, but we have to define something\n        //otherwise the drop action won't work at all in firefox\n        //most browsers support the proper mime-type syntax, eg. \"text/plain\"\n        //but we have to use this incorrect syntax for the benefit of IE10+\n        e.dataTransfer.setData('text', '');\n\n    }, false);\n\n    //dragover event to allow the drag by preventing its default\n    //ie. the default action of an element is not to allow dragging\n    document.addEventListener('dragover', function(e)\n    {\n        if(item)\n        {\n            e.preventDefault();\n        }\n\n    }, false);\n\n    //drop event to allow the element to be dropped into valid targets\n    document.addEventListener('drop', function(e)\n    {\n        //if this element is a drop target, move the item here\n        //then prevent default to allow the action (same as dragover)\n        if(e.target.getAttribute('data-draggable') == 'target')\n        {\n            e.target.appendChild(item);\n\n            e.preventDefault();\n        }\n\n    }, false);\n\n    //dragend event to clean-up after drop or abort\n    //which fires whether or not the drop target was valid\n    document.addEventListener('dragend', function(e)\n    {\n        item = null;\n\n    }, false);\n\n\n\n});\n\n"]}